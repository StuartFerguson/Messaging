<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MessagingService</name>
    </assembly>
    <members>
        <member name="M:MessagingService.Common.ClaimsHelper.GetUserClaim(System.Security.Claims.ClaimsPrincipal,System.String,System.String)">
            <summary>
            Gets the user claims.
            </summary>
            <param name="user">The user.</param>
            <param name="customClaimType">Type of the custom claim.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">No claim [{customClaimType}] found for user id [{userIdClaim.Value}</exception>
        </member>
        <member name="M:MessagingService.Common.ClaimsHelper.IsPasswordToken(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Determines whether [is client token] [the specified user].
            </summary>
            <param name="user">The user.</param>
            <returns>
              <c>true</c> if [is client token] [the specified user]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MessagingService.Common.ClaimsHelper.ValidateRouteParameter``1(``0,System.Security.Claims.Claim)">
            <summary>
            Validates the route parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routeParameter">The route parameter.</param>
            <param name="userClaim">The user claim.</param>
        </member>
        <member name="M:MessagingService.Common.ClaimsHelper.IsUserRolesValid(System.Security.Claims.ClaimsPrincipal,System.String[])">
            <summary>
            Determines whether [is user roles valid] [the specified user].
            </summary>
            <param name="user">The user.</param>
            <param name="allowedRoles">The allowed roles.</param>
            <returns>
              <c>true</c> if [is user roles valid] [the specified user]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MessagingService.Common.RequestExamples.ExampleData">
            <summary>
            
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.ConnectionIdentifier">
            <summary>
            The connection identifier
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.EmailMessageFromAddress">
            <summary>
            The email message from address
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.EmailMessageHtmlBody">
            <summary>
            The email message HTML body
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.EmailMessageId">
            <summary>
            The email message identifier
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.EmailMessageIsHtml">
            <summary>
            The email message is HTML
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.EmailMessagePlainTextBody">
            <summary>
            The email message plain text body
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.EmailMessagePlainTextIsHtml">
            <summary>
            The email message plain text is HTML
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.EmailMessageSubject">
            <summary>
            The email message subject
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.EmailMessageToAddress1">
            <summary>
            The email message to address1
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.EmailMessageToAddress2">
            <summary>
            The email message to address2
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.SMSMessageDestination">
            <summary>
            The SMS message destination
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.SMSMessageId">
            <summary>
            The SMS message identifier
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.SMSMessageMessage">
            <summary>
            The SMS message message
            </summary>
        </member>
        <member name="F:MessagingService.Common.RequestExamples.ExampleData.SMSMessageSender">
            <summary>
            The SMS message sender
            </summary>
        </member>
        <member name="T:MessagingService.Common.RequestExamples.SendEmailRequestExample">
            <summary>
            
            </summary>
            <seealso cref="!:Swashbuckle.AspNetCore.Filters.IMultipleExamplesProvider&lt;MessagingService.DataTransferObjects.SendEmailRequest&gt;" />
        </member>
        <member name="M:MessagingService.Common.RequestExamples.SendEmailRequestExample.GetExamples">
            <summary>
            Gets the examples.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MessagingService.Common.RequestExamples.SendEmailResponseExample">
            <summary>
            
            </summary>
            <seealso cref="!:Swashbuckle.AspNetCore.Filters.IExamplesProvider&lt;MessagingService.DataTransferObjects.SendEmailResponse&gt;" />
        </member>
        <member name="M:MessagingService.Common.RequestExamples.SendEmailResponseExample.GetExamples">
            <summary>
            Gets the examples.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MessagingService.Common.RequestExamples.SendSMSRequestExample">
            <summary>
            
            </summary>
            <seealso cref="!:Swashbuckle.AspNetCore.Filters.IExamplesProvider&lt;MessagingService.DataTransferObjects.SendSMSRequest&gt;" />
        </member>
        <member name="M:MessagingService.Common.RequestExamples.SendSMSRequestExample.GetExamples">
            <summary>
            Gets the examples.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MessagingService.Common.RequestExamples.SendSMSResponseExample">
            <summary>
            
            </summary>
            <seealso cref="!:Swashbuckle.AspNetCore.Filters.IExamplesProvider&lt;MessagingService.DataTransferObjects.SendSMSResponse&gt;" />
        </member>
        <member name="M:MessagingService.Common.RequestExamples.SendSMSResponseExample.GetExamples">
            <summary>
            Gets the examples.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MessagingService.Common.SwaggerDefaultValues">
            <summary>
            Represents the Swagger/Swashbuckle operation filter used to document the implicit API version parameter.
            </summary>
            <remarks>This <see cref="T:Swashbuckle.AspNetCore.SwaggerGen.IOperationFilter"/> is only required due to bugs in the <see cref="T:Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator"/>.
            Once they are fixed and published, this class can be removed.</remarks>
        </member>
        <member name="M:MessagingService.Common.SwaggerDefaultValues.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies the filter to the specified operation using the given context.
            </summary>
            <param name="operation">The operation to apply the filter to.</param>
            <param name="context">The current operation filter context.</param>
        </member>
        <member name="T:MessagingService.Common.SwaggerJsonConverter">
            <summary>
            
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="P:MessagingService.Common.SwaggerJsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
              <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MessagingService.Common.SwaggerJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MessagingService.Common.SwaggerJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MessagingService.Common.SwaggerJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:MessagingService.Controllers.DomainEventController">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:MessagingService.Controllers.DomainEventController.DomainEventHandlerResolver">
            <summary>
            The domain event handler resolver
            </summary>
        </member>
        <member name="M:MessagingService.Controllers.DomainEventController.#ctor(Shared.EventStore.EventHandling.IDomainEventHandlerResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:MessagingService.Controllers.DomainEventController"/> class.
            </summary>
            <param name="domainEventHandlerResolver">The domain event handler resolver.</param>
        </member>
        <member name="M:MessagingService.Controllers.DomainEventController.PostEventAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Posts the event asynchronous.
            </summary>
            <param name="domainEvent">The domain event.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MessagingService.Controllers.DomainEventController.Callback(System.Threading.CancellationToken,System.Guid)">
            <summary>
            Callbacks the specified cancellation token.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="eventId">The event identifier.</param>
        </member>
        <member name="M:MessagingService.Controllers.DomainEventController.GetDomainEvent(System.Object)">
            <summary>
            Gets the domain event.
            </summary>
            <param name="domainEvent">The domain event.</param>
            <returns></returns>
        </member>
        <member name="F:MessagingService.Controllers.DomainEventController.ControllerName">
            <summary>
            The controller name
            </summary>
        </member>
        <member name="F:MessagingService.Controllers.DomainEventController.ControllerRoute">
            <summary>
            The controller route
            </summary>
        </member>
        <member name="T:MessagingService.Controllers.EmailController">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:MessagingService.Controllers.EmailController.Mediator">
            <summary>
            The mediator
            </summary>
        </member>
        <member name="M:MessagingService.Controllers.EmailController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the <see cref="T:MessagingService.Controllers.EmailController"/> class.
            </summary>
            <param name="mediator">The mediator.</param>
        </member>
        <member name="M:MessagingService.Controllers.EmailController.SendEmail(MessagingService.DataTransferObjects.SendEmailRequest,System.Threading.CancellationToken)">
            <summary>
            Sends the email.
            </summary>
            <param name="sendEmailRequest">The send email request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="F:MessagingService.Controllers.EmailController.ControllerName">
            <summary>
            The controller name
            </summary>
        </member>
        <member name="F:MessagingService.Controllers.EmailController.ControllerRoute">
            <summary>
            The controller route
            </summary>
        </member>
        <member name="F:MessagingService.Controllers.SMSController.Mediator">
            <summary>
            The mediator
            </summary>
        </member>
        <member name="M:MessagingService.Controllers.SMSController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the <see cref="T:MessagingService.Controllers.EmailController"/> class.
            </summary>
            <param name="mediator">The mediator.</param>
        </member>
        <member name="M:MessagingService.Controllers.SMSController.SendSMS(MessagingService.DataTransferObjects.SendSMSRequest,System.Threading.CancellationToken)">
            <summary>
            Sends the SMS.
            </summary>
            <param name="sendSMSRequest">The send SMS request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="F:MessagingService.Controllers.SMSController.ControllerName">
            <summary>
            The controller name
            </summary>
        </member>
        <member name="F:MessagingService.Controllers.SMSController.ControllerRoute">
            <summary>
            The controller route
            </summary>
        </member>
        <member name="M:MessagingService.Program.Worker_TraceGenerated(System.String,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Workers the trace generated.
            </summary>
            <param name="trace">The trace.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:MessagingService.Startup.RegisterEmailProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the email proxy.
            </summary>
            <param name="services">The services.</param>
        </member>
    </members>
</doc>
